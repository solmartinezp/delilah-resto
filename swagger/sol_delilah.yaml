swagger: '2.0'
info:
  description: Delilah Restó is a food ordering app for restaurants
  version: 1.0.0
  title: Delilah Restó
  contact:
    email: solmartinezpisani@gmail.com
tags:
  - name: users
    description: Operations on users
  - name: products
    description: Operations on products
  - name: cart
    description: Operations on shopping cart
  - name: checkout
    description: Confirming the payment
  - name: orders
    description: Operations on orders
schemes:
  - https
  - http
paths:
  /users/register:
    post:
      tags:
        - users
      summary: Create user
      operationId: createUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Create user object
          required: true
          schema:
            $ref: '#/definitions/Register'
      responses:
        '201':
          description: Successful Register
          schema:
            $ref: '#/definitions/RegisterResponse'
        '400':
          description: Unsuccessful Register
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 400
              message:
                type: string
                example: User already exists
  /users/login:
    post:
      tags:
        - users
      summary: Log user into the system
      operationId: loginUser
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Login user object.
          required: true
          schema:
            $ref: '#/definitions/Login'
      responses:
        '200':
          description: Successful login
          schema:
            $ref: '#/definitions/LoginResponse'
        '400':
          description: Unsuccessful login
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 400
              message:
                type: string
                example: Incorrect user or password
  /users:
    get:
      tags:
        - users
      summary: Get info of all users (admin)
      operationId: getUsers
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items: 
              $ref: '#/definitions/GetUsers'
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '403':
          description: Forbidden
          schema:
            properties:
              status_code:
                type: integer
                format: int64
                example: 403
              message:
                type: string
                example: Forbidden
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
  /users/{id}:
    get:
      tags:
        - users
      summary: Get info of one user
      operationId: getUser
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
        - in: path
          name: id
          type: integer
          required: true
          description: Numeric ID of the user.
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/GetUsers'
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '403':
          description: Forbidden
          schema:
            properties:
              status_code:
                type: integer
                format: int64
                example: 403
              message:
                type: string
                example: Forbidden
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
  /users/{id}/favorites:
    get:
      tags:
        - users
      summary: Get the favorite products of a user
      operationId: getUserFavorites
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
        - in: path
          name: id
          type: integer
          required: true
          description: Numeric ID of the user.
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/GetFavorites'
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '403':
          description: Forbidden
          schema:
            properties:
              status_code:
                type: integer
                format: int64
                example: 403
              message:
                type: string
                example: Forbidden
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
  /users/{id}/products/{idProduct}/favorites:
    post:
      tags:
        - users
      summary: Add product to favorites
      operationId: addFavorite
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
        - in: path
          name: id
          type: integer
          required: true
          description: Numeric ID of the user.
        - in: path
          name: idProduct
          type: integer
          required: true
          description: Numeric ID of the product you want to add to Favorites.
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/CreateFavoriteResponse'
        '400':
          description: Unsuccessful
          schema:
            type: object
            properties:
              message:
                type: string
                example: The product has already been added to Favorites
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
  /users/{id}/favorite/{idProduct}:
    delete:
      tags:
        - users
      summary: Delete product from favorites
      operationId: deleteFavorite
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
        - in: path
          name: id
          type: integer
          required: true
          description: Numeric ID of the user.
        - in: path
          name: idProduct
          type: integer
          required: true
          description: Numeric ID of the product you want to add to Favorites.
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/DeleteFavoriteResponse'
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
  /products:
    get:
      tags:
        - products
      summary: Get products
      operationId: getProducts
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/GetProducts'
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
    post:
      tags:
        - products
      summary: Create product (admin)
      operationId: createProduct
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
        - in: body
          name: body
          description: Create product object
          required: true
          schema:
            $ref: '#/definitions/CreateProduct'
      responses:
        '201':
          description: Successful operation
          schema:
            $ref: '#/definitions/CreateProductResponse'
        '400':
          description: Unsuccessful
          schema:
            type: object
            properties:
              message:
                type: string
                example: Product already exists
        '403':
          description: Forbidden
          schema:
            properties:
              status_code:
                type: integer
                format: int64
                example: 403
              message:
                type: string
                example: Forbidden
  /products/{id}:
    patch:
      tags:
        - products
      summary: Update product (admin)
      operationId: updateProduct
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
        - in: path
          name: id
          type: integer
          required: true
          description: Numeric ID of the product to update.
        - in: body
          name: body
          description: >-
            Update product object. You must only add the fields you want to
            change
          required: true
          schema:
            $ref: '#/definitions/UpdateProduct'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/UpdateProductResponse'
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '403':
          description: Forbidden
          schema:
            properties:
              status_code:
                type: integer
                format: int64
                example: 403
              message:
                type: string
                example: Forbidden
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
    delete:
      tags:
        - products
      summary: Delete product (admin)
      operationId: deleteProduct
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
        - in: path
          name: id
          type: integer
          required: true
          description: Numeric ID of the product to delete.
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/DeleteProductResponse'
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '403':
          description: Forbidden
          schema:
            properties:
              status_code:
                type: integer
                format: int64
                example: 403
              message:
                type: string
                example: Forbidden
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
  /cart/orders/{id}:
    get:
      tags:
        - cart
      summary: See shopping cart
      operationId: seeCart
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
        - in: path
          name: id
          type: integer
          required: true
          description: Numeric ID of the order with a status of Shopping Cart.
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/SeeCartResponse'
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
  /cart/orders/products/{idProduct}:
    post:
      tags:
        - cart
      summary: Add product to shopping cart
      operationId: addToCart
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
        - in: path
          name: idProduct
          type: integer
          required: true
          description: Numeric ID of the product.
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/AddCartResponse'
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '404':
          description: Not Found
          schema:
            type: object
            example: 'status_code: 404'
  /cart/orders/{idOrder}/products/{idProduct}:
    delete:
      tags:
        - cart
      summary: Delete product from shopping cart
      operationId: deleteFromCart
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
        - in: path
          name: idOrder
          type: integer
          required: true
          description: Numeric ID of the order to be deleted from the shopping cart.
        - in: path
          name: idProduct
          type: integer
          required: true
          description: Numeric ID of the product to be deleted from the shopping cart.
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/DeleteFromCartResponse'
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
  /checkout/orders/{id}:
    patch:
      tags:
        - checkout
      summary: Confirm payment (admin)
      operationId: checkout
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
        - in: path
          name: id
          type: integer
          required: true
          description: Numeric ID of the order to update.
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/CheckoutResponse'
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
  /orders:
    get:
      tags:
        - orders
      summary: Get all orders (admin)
      operationId: getOrders
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/GetOrders'
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
  /orders/pending:
    get:
      tags:
        - orders
      summary: Get all pending orders (admin)
      operationId: getPending
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              type: object
              properties:
                order_date:
                  type: string
                  example: '2021-01-27T14:34:01.000Z'
                id:
                  type: integer
                  format: int64
                  example: 13
                total_price:
                  type: integer
                  format: int64
                  example: 300
                user_id:
                  type: "integer"
                  format: "int64"
                  example: 1
                name:
                  type: string
                  example: "Sol Martinez"
                address:
                  type: string
                  example: "Cornelia Street 13"
                status:
                  type: string
                  example: "Pending"
                description:
                  type: array
                  items:
                    type: string
                    example: "2x Pizza"
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
  /orders/inprogress:
    get:
      tags:
        - orders
      summary: Get all the orders that are in progress (admin)
      operationId: getInProgress
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              type: object
              properties:
                order_date:
                  type: string
                  example: '2021-01-27T14:34:01.000Z'
                id:
                  type: integer
                  format: int64
                  example: 13
                total_price:
                  type: integer
                  format: int64
                  example: 300
                user_id:
                  type: integer
                  format: int64
                  example: 1
                name:
                  type: string
                  example: "Sol Martinez"
                address:
                  type: string
                  example: "Cornelia Street 13"
                status:
                  type: string
                  example: "In Progress"
                description:
                  type: array
                  items:
                    type: string
                    example: "2x Pizza"
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
  /orders/ready:
    get:
      tags:
        - orders
      summary: Get all the orders that are ready (admin)
      operationId: getReadyOrders
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              type: object
              properties:
                order_date:
                  type: string
                  example: '2021-01-27T14:34:01.000Z'
                id:
                  type: integer
                  format: int64
                  example: 13
                total_price:
                  type: integer
                  format: int64
                  example: 300
                user_id:
                  type: "integer"
                  format: "int64"
                  example: 1
                name:
                  type: string
                  example: "Sol Martinez"
                address:
                  type: string
                  example: "Cornelia Street 13"
                status:
                  type: string
                  example: "Ready"
                description:
                  type: array
                  items:
                    type: string
                    example: "2x Pizza"
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
  /orders/shipped:
    get:
      tags:
        - orders
      summary: Get all shipped orders (admin)
      operationId: getShippedOrders
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              type: object
              properties:
                order_date:
                  type: string
                  example: '2021-01-27T14:34:01.000Z'
                id:
                  type: integer
                  format: int64
                  example: 13
                total_price:
                  type: integer
                  format: int64
                  example: 300
                user_id:
                  type: string
                  example: '1'
                name:
                  type: string
                  example: Sol Martinez
                address:
                  type: string
                  example: Cornelia Street 13
                status:
                  type: string
                  example: Shipped
                description:
                  type: array
                  items:
                    type: string
                    example: "2x Pizza"
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
  /orders/delivered:
    get:
      tags:
        - orders
      summary: Get all delivered orders (admin)
      operationId: getDeliveredOrders
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              type: object
              properties:
                order_date:
                  type: string
                  example: '2021-01-27T14:34:01.000Z'
                id:
                  type: integer
                  format: int64
                  example: 13
                total_price:
                  type: integer
                  format: int64
                  example: 300
                user_id:
                  type: "integer"
                  format: "int64"
                  example: 1
                name:
                  type: string
                  example: "Sol Martinez"
                address:
                  type: string
                  example: "Cornelia Street 13"
                status:
                  type: string
                  example: "Delivered"
                description:
                  type: array
                  items:
                    type: string
                    example: "2x Pizza"
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
  /orders/cancelled:
    get:
      tags:
        - orders
      summary: Get all cancelled orders (admin)
      operationId: getCancelledOrders
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
      responses:
        '200':
          description: Successful operation
          schema:
            type: array
            items:
              type: object
              properties:
                order_date:
                  type: string
                  example: '2021-01-27T14:34:01.000Z'
                id:
                  type: integer
                  format: int64
                  example: 13
                total_price:
                  type: integer
                  format: int64
                  example: 300
                user_id:
                  type: "integer"
                  format: "int64"
                  example: 1
                name:
                  type: string
                  example: "Sol Martinez"
                address:
                  type: string
                  example: "Cornelia Street 13"
                status:
                  type: string
                  example: "Cancelled"
                description:
                  type: array
                  items:
                    type: string
                    example: "2x Pizza"
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
  /orders/{id}:
    patch:
      tags:
        - orders
      summary: Updates an order status
      operationId: updateOrder
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
        - in: path
          name: id
          type: integer
          required: true
          description: Numeric ID of the order to update
        - in: body
          name: body
          description: |-
            Update order string. It has 8 possible values: 
             1 (equals to Cart),  
             2 (equals to Checkout),  
             3 (equals to Pending),  
             4 (equals to In Progress),  
             5 (equals to Ready),  
              6 (equals to Shipped),  
             7 (equals to Delivered),  
             8 (equals to Cancelled)
          schema:
            type: object
            properties:
              idStatus:
                type: integer
                format: int64
                example: '3'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/UpdateOrderResponse'
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
    delete:
      tags:
        - orders
      summary: Delete order
      operationId: deleteOrder
      produces:
        - application/json
      parameters:
        - name: User token
          in: header
          required: true
          type: string
          description: User JWT token (Bearer)
        - in: path
          name: id
          type: integer
          required: true
          description: Numeric ID of the order to delete.
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/DeleteOrderResponse'
        '400':
          description: Unsuccessful
          schema:
            $ref: '#/definitions/Authenticate'
        '404':
          description: Not Found
          schema:
            type: object
            properties:
              status_code:
                type: integer
                format: int64
                example: 404
definitions:
  Authenticate:
    type: object
    properties:
      message:
        type: string
        example: Header must contain JWT to verify identity.
  Register:
    type: object
    properties:
      user:
        type: string
        example: solmarti1
      name:
        type: string
        example: Sol
      last_name:
        type: string
        example: Martinez
      password:
        type: string
        example: password!13
      email:
        type: string
        example: solmartinezpisani@email.com
      phone_number:
        type: string
        example: 1155998655
      address:
        type: string
        example: Cornelia Street 13
      admin:
        type: integer
        format: int64
        example: 1
  RegisterResponse:
    type: object
    properties:
      message:
        type: string
        example: New User has been created
  Login:
    type: object
    properties:
      user:
        type: string
        example: solmarti1
      password:
        type: string
        example: password!13
  LoginResponse:
    type: object
    properties:
      token:
        type: string
        example: >-
          eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyTmFtZSI6InVzdWFyaW9kZW1vMjMiLCJpc0FkbWluIjowLCJpYXQiOjE1ODg1NTA2MjgsImV4cCI6MTU4ODYzNzAyOH0.OXF880nyOkmH31U5ZzZaMlfN9EaXCGrrPgECvq-mktk
  GetOrders:
    type: object
    properties:
      order_date:
        type: string
        example: '2021-01-27T14:34:01.000Z'
      id:
        type: integer
        format: int64
        example: 13
      total_price:
        type: integer
        format: int64
        example: 300
      user_id:
        type: string
        example: '1'
      name:
        type: string
        example: Sol Martinez
      address:
        type: string
        example: Cornelia Street 13
      status:
        type: string
        example: Cart
      description:
        type: array
        items:
          type: string
          example: 2x Pizza
  GetUsers:
    type: object
    properties:
      user_id:
        type: integer
        format: int64
        example: 1
      user:
        type: string
        example: solmarti1
      name:
        type: string
        example: Sol
      last_name:
        type: string
        example: Martinez
      password:
        type: string
        example: $2b$10$4rs9JkKx3o54M3DCZynoPe5AvXGT2.WMYfMhzvjxmgv/S5RCvk1gO
      email:
        type: string
        example: solmartinezpisani@email.com
      phone_number:
        type: string
        example: 1155998655
      address:
        type: string
        example: Cornelia Street 13
      admin:
        type: integer
        format: int64
        example: 1
  GetFavorites:
    type: object
    properties:
      product_name:
        type: string
        example: Pizza Pepperoni
      product_price:
        type: string
        example: '500.00'
  GetProducts:
    type: object
    properties:
      id:
        type: integer
        format: int64
        example: 13
      name:
        type: string
        example: Pizza
      description:
        type: string
        example: Pepperoni Pizza
      price:
        type: integer
        format: int64
        example: 350
  CreateProduct:
    type: object
    properties:
      name:
        type: string
        example: Pizza
      description:
        type: string
        example: Pepperoni Pizza
      price:
        type: string
        example: 350
      stock:
        type: integer
        format: int64
        example: 200
  UpdateProduct:
    type: object
    properties:
      name:
        type: string
        example: Pizza
      description:
        type: string
        example: Neapolitan Pizza
      price:
        type: string
        example: '500.00'
      stock:
        type: integer
        format: int64
        example: 2000
  CreateFavoriteResponse:
    type: object
    properties:
      message:
        type: string
        example: Added to Favorites
  DeleteFavoriteResponse:
    type: object
    properties:
      status_code:
        type: integer
        format: int64
        example: 200
      message:
        type: string
        example: Deleted from Favorites
  CreateProductResponse:
    type: object
    properties:
      message:
        type: string
        example: New Product
  UpdateProductResponse:
    type: object
    properties:
      message:
        type: string
        example: Product updated
  DeleteProductResponse:
    type: object
    properties:
      message:
        type: string
        example: Product deleted
  SeeCartResponse:
      type: array
      items:
        $ref: '#/definitions/Cart'
      example:
        - name: "Pizza"
          price: 500
          amount : 1
        - total_price: 500
        - address: "Cornelia Street"
  Cart: 
    type: object
    properties:
      name:
        type: string
        description: Pizza
      price:
        type: "integer"
        format: "int64"
        example: 500.00
      amount: 
        type: "integer"
        format: "int64"
        example: 1
      total_price:
        type: "integer"
        format: "int64"
        example: 500.00
      address:
        type: "string"
        example: "Cornelia Street"

  AddCartResponse:
    type: object
    properties:
      message:
        type: string
        example: Added to cart
  DeleteFromCartResponse:
    type: object
    properties:
      message:
        type: string
        example: Product removed from shopping cart
  CheckoutResponse:
    type: object
    properties:
      message:
        type: string
        example: Payment confirmed
  DeleteOrderResponse:
    type: object
    properties:
      message:
        type: string
        example: Order deleted successfully
  UpdateOrderResponse:
    type: object
    properties:
      message:
        type: string
        example: Order status changed successfully
  
externalDocs:
  description: GitHub Repository
  url: 'https://github.com/solmartinezp/delilah-resto'
